use std::net::{Ipv4Addr, Ipv6Addr};

use ipnet::*;

use crate::parse::*;

use super::*;

use {MatchProblem::*, Report::*, ReportItem::*, SkipReason::*, SuccessType::*};

pub const RECURSION_LIMIT: isize = 0x100;

/// All information needed for a route to be compared to [`QueryDump`].
/// The main usage is to generate [`Report`]s with [`check`](#method.check).
#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Compare {
    /// IP prefix propagated.
    pub prefix: IpNet,
    /// AS path for the propagation.
    pub as_path: Vec<AsPathEntry>,
    /// Recursion limit when checking against [`QueryDump`].
    /// Default to [`RECURSION_LIMIT`]
    pub recursion_limit: isize,
    /// [`Verbosity`] level when generating report.
    pub verbosity: Verbosity,
}

impl Compare {
    pub fn new(prefix: IpNet, mut as_path: Vec<AsPathEntry>) -> Self {
        as_path.dedup();
        as_path.shrink_to_fit();
        Self {
            prefix,
            as_path,
            recursion_limit: RECURSION_LIMIT,
            verbosity: Verbosity::default(),
        }
    }

    /// Set `self.verbosity`.
    pub fn verbosity(self, verbosity: Verbosity) -> Self {
        Self { verbosity, ..self }
    }

    /// Create [`Compare`] from a line of table dump generated by `bgpdump`
    /// on a MRT file.
    pub fn with_line_dump(line: &str) -> Result<Self> {
        let (prefix, as_path, _, _) = parse_table_dump(line)?;
        Ok(Self::new(prefix, as_path))
    }

    /// Check `self` against RPSL policy `dump` and generate reports.
    /// Depending on which [`Verbosity`] `self.verbose` is set to,
    /// the reports have different levels of details.
    /// If `verbosity.stop_at_err`, stops at the first erroneous AS pair.
    pub fn check(&self, dump: &QueryDump) -> Vec<Report> {
        let mut reports = Vec::with_capacity(self.as_path.len() * 2);
        if self.as_path.len() == 1 {
            reports.extend(self.check_last_export(dump));
        }

        let reverse_as_path = self.as_path.iter().rev();
        // Iterate the pairs in `as_path` from right to left, with overlaps.
        for (from, to) in reverse_as_path.clone().zip(reverse_as_path.skip(1)) {
            if let (AsPathEntry::Seq(from), AsPathEntry::Seq(to)) = (from, to) {
                let r = self.check_pair(dump, *from, *to);
                if !r.is_empty() {
                    reports.extend(r);
                    if self.verbosity.stop_at_first {
                        break;
                    }
                }
            } else {
                let pair_report = self.skip_report(|| AsPathPairWithSet(from.clone(), to.clone()));
                reports.extend(pair_report);
            }
        }
        reports.shrink_to_fit();
        reports
    }

    pub fn check_last_export(&self, dump: &QueryDump) -> Option<Report> {
        match self.as_path.last()? {
            AsPathEntry::Seq(from) => self
                .get_aut_num_then(dump, *from, |from_an| {
                    self.check_export(dump, from_an, *from, None)
                })
                .or_else(|| self.success_report(|| ExportSingle(*from))),
            entry => self.skip_report(|| AsPathWithSet(entry.clone())),
        }
    }

    pub fn check_pair(&self, dump: &QueryDump, from: usize, to: usize) -> Vec<Report> {
        let from_report = match self.get_aut_num_then(dump, from, |from_an| {
            self.check_export(dump, from_an, from, Some(to))
        }) {
            Some(r) if self.verbosity.stop_at_first => return vec![r],
            None => self.success_report(|| Export(from, to)),
            some => some,
        };
        let to_report = self
            .get_aut_num_then(dump, to, |to_an| self.check_import(dump, to_an, from, to))
            .or_else(|| self.success_report(|| Import(to, from)));
        [from_report, to_report].into_iter().flatten().collect()
    }

    pub fn get_aut_num_then<F>(&self, dump: &QueryDump, aut_num: usize, call: F) -> Option<Report>
    where
        F: Fn(&AutNum) -> Option<Report>,
    {
        match dump.aut_nums.get(&aut_num) {
            Some(aut_num) => call(aut_num),
            None => self.skip_report(|| AutNumUnrecorded(aut_num)),
        }
    }

    pub fn check_export(
        &self,
        dump: &QueryDump,
        from_an: &AutNum,
        from: usize,
        to: Option<usize>,
    ) -> Option<Report> {
        if from_an.exports.is_default() {
            return self.skip_report(|| ExportEmpty);
        }
        let (mut items, fail) = self.check_compliant(dump, &from_an.exports, to)?;
        if fail {
            let reason = match to {
                Some(to) => NoExportRule(from, to),
                None => NoExportRuleSingle(from),
            };
            items.push(NoMatch(reason));
            Some(Bad(items))
        } else {
            self.skips_report(items)
        }
    }

    pub fn check_import(
        &self,
        dump: &QueryDump,
        to_an: &AutNum,
        from: usize,
        to: usize,
    ) -> Option<Report> {
        if to_an.imports.is_default() {
            return self.skip_report(|| ImportEmpty);
        }
        let (mut items, fail) = self.check_compliant(dump, &to_an.imports, Some(from))?;
        if fail {
            items.push(NoMatch(NoImportRule(to, from)));
            Some(Bad(items))
        } else {
            self.skips_report(items)
        }
    }

    pub fn check_compliant(
        &self,
        dump: &QueryDump,
        policy: &Versions,
        accept_num: Option<usize>,
    ) -> AnyReport {
        let mut aggregator: AnyReportAggregator = match self.prefix {
            IpNet::V4(_) => self.check_casts(dump, &policy.ipv4, accept_num),
            IpNet::V6(_) => self.check_casts(dump, &policy.ipv6, accept_num),
        }?
        .into();
        aggregator.join(self.check_casts(dump, &policy.any, accept_num)?);
        aggregator.to_any()
    }

    pub fn check_casts(
        &self,
        dump: &QueryDump,
        casts: &Casts,
        accept_num: Option<usize>,
    ) -> AnyReport {
        let mut aggregator = AnyReportAggregator::new();
        let specific_cast = match is_multicast(&self.prefix) {
            true => &casts.multicast,
            false => &casts.unicast,
        };
        for entry in [specific_cast, &casts.any].into_iter().flatten() {
            aggregator.join(self.check_entry(dump, entry, accept_num).to_any()?);
        }
        aggregator.to_any()
    }

    pub fn check_entry(
        &self,
        dump: &QueryDump,
        entry: &Entry,
        accept_num: Option<usize>,
    ) -> AllReport {
        let peering_report = match accept_num {
            Some(accept_num) => self
                .check_peering_actions(dump, &entry.mp_peerings, accept_num)
                .to_all()
                .map_err(|mut report| {
                    if self.verbosity.per_entry_err {
                        report.push(NoMatch(Peering));
                    }
                    report
                })?,
            None => None,
        };
        let filter_report = CheckFilter {
            dump,
            compare: self,
            verbosity: self.verbosity,
        }
        .check(&entry.mp_filter, self.recursion_limit)
        .to_all()
        .map_err(|mut report| {
            if self.verbosity.per_entry_err {
                report.push(NoMatch(Filter));
            }
            report
        })?;
        peering_report.join(filter_report).to_all()
    }

    pub fn check_peering_actions<'a, I>(
        &self,
        dump: &QueryDump,
        peerings: I,
        accept_num: usize,
    ) -> AnyReport
    where
        I: IntoIterator<Item = &'a PeeringAction>,
    {
        let mut aggregator = AnyReportAggregator::new();
        for peering_actions in peerings.into_iter() {
            let report = self.check_peering_action(dump, peering_actions, accept_num);
            aggregator.join(report.to_any()?);
        }
        aggregator.to_any()
    }

    pub fn check_peering_action(
        &self,
        dump: &QueryDump,
        peering_actions: &PeeringAction,
        accept_num: usize,
    ) -> AllReport {
        CheckPeering {
            dump,
            compare: self,
            accept_num,
            verbosity: self.verbosity,
        }
        .check(&peering_actions.mp_peering, self.recursion_limit)
        // Skipped.
        /* ?
        .join(self.check_actions(&peering_actions.actions)?)
        .to_all()
        */
    }

    /// We skip community checks, but this could be an enhancement.
    /// <https://github.com/SichangHe/parse_rpsl_policy/issues/16>.
    pub fn check_actions(&self, _actions: &Actions) -> AllReport {
        Ok(None)
    }

    pub fn goes_through_num(&self, num: usize) -> bool {
        self.as_path.iter().any(|p| p.contains_num(num))
    }
}

impl VerbosityReport for Compare {
    fn get_verbosity(&self) -> Verbosity {
        self.verbosity
    }
}

pub const MULTICAST_V4: Result<Ipv4Net, PrefixLenError> =
    Ipv4Net::new(Ipv4Addr::new(224, 0, 0, 0), 4);
pub const MULTICAST_V6: Result<Ipv6Net, PrefixLenError> =
    Ipv6Net::new(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0), 8);

/// Check if `prefix` is multicast.
pub fn is_multicast(prefix: &IpNet) -> bool {
    match prefix {
        IpNet::V4(prefix) => MULTICAST_V4
            .expect("MULTICAST_V4 is for sure Ok")
            .contains(prefix),
        IpNet::V6(prefix) => MULTICAST_V6
            .expect("MULTICAST_V6 is for sure Ok")
            .contains(prefix),
    }
}
